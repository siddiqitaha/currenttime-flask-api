apiVersion: apps/v1
kind: Deployment
metadata:
  name: currenttime-flask-api
  labels:
    app: currenttime-flask-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: currenttime-flask-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: currenttime-flask-api
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: currenttime-flask-api
        image: siddiqitaha/currenttime-flask-api:latest
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        ports:
        - containerPort: 80
          name: http
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: currenttime-flask-api-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
    prometheus.io/path: "/metrics"
spec:
  type: LoadBalancer
  selector:
    app: currenttime-flask-api
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
    name: http
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: currenttime-flask-api-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: currenttime-flask-api
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: currenttime-flask-api-network-policy
spec:
  podSelector:
    matchLabels:
      app: currenttime-flask-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - ports:
    - port: 80